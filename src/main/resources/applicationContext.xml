<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd">

    <context:component-scan base-package="dao"/>
    <context:component-scan base-package="service"/>
    <context:property-placeholder location="classpath:spring-config.properties"/>

    <!--配置数据源-->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close"
          p:driverClassName="${dataSource.driverClassName}"
          p:url="${dataSource.url}"
          p:username="${dataSource.username}"
          p:password="${dataSource.password}"/>

    <!--配置HibernateSessionFactory-->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean"
          p:dataSource-ref="dataSource">
        <property name="packagesToScan" value="model"/>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                <prop key="hibernate.show_sql">true</prop>
            </props>
        </property>
    </bean>

    <!--配置HibernateTemplate-->
    <bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate"
          p:sessionFactory-ref="sessionFactory"/>

    <!--配置Hibernate事务管理器-->
    <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager"
          p:sessionFactory-ref="sessionFactory"/>
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- redis连接池的配置 -->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig"
          p:maxTotal="${redis.maxTotal}"
          p:maxIdle="${redis.maxIdle}"
          p:minIdle="${redis.minIdle}"
          p:maxWaitMillis="${redis.maxWaitMillis}"/>

    <!-- redis的连接池 -->
    <bean id="jedisPool" class="redis.clients.jedis.JedisPool"
          c:poolConfig-ref="jedisPoolConfig"
          c:host="${redis.host}"
          c:port="${redis.port}"/>

    <!-- httpClient连接管理器 -->
    <bean id="httpClientConnectionManager" class="org.apache.http.impl.conn.PoolingHttpClientConnectionManager"
          destroy-method="close">
        <!-- 设置最大连接数 -->
        <property name="maxTotal" value="${httpClient.maxTotal}" />
        <!-- 设置每个主机地址的并发数 -->
        <property name="defaultMaxPerRoute" value="${httpClient.defaultMaxPerRoute}" />
    </bean>
    <!-- httpClient对象构建器 -->
    <bean id="httpClientBuilder" class="org.apache.http.impl.client.HttpClientBuilder">
        <!-- 设置连接管理器 -->
        <property name="connectionManager" ref="httpClientConnectionManager" />
    </bean>
    <!-- Httpclient对象 -->
    <bean id="httpClient" class="org.apache.http.impl.client.CloseableHttpClient"
          factory-bean="httpClientBuilder" factory-method="build" scope="prototype">
    </bean>

    <!--请求配置构建器-->
    <bean id="requestConfigBuilder" class="org.apache.http.client.config.RequestConfig.Builder">
        <!-- 设置创建连接的最长时间 -->
        <property name="connectTimeout" value="${httpClient.connectTimeout}"/>
        <!-- 设置从连接池中获取到连接的最长时间 -->
        <property name="connectionRequestTimeout" value="${httpClient.connectionRequestTimeout}"/>
        <!-- 设置数据传输的最长时间 -->
        <property name="socketTimeout" value="${httpClient.socketTimeout}"/>
        <!-- 设置提交请求前测试连接是否可用 -->
        <property name="staleConnectionCheckEnabled" value="${httpClient.staleConnectionCheckEnabled}"/>
    </bean>
    <!-- 请求配置 -->
    <bean id="requestConfig" class="org.apache.http.client.config.RequestConfig" factory-bean="requestConfigBuilder" factory-method="build">
    </bean>

    <!-- 清理无效连接类 -->
    <bean class="util.IdleConnectionEvictor"
          destroy-method="shutdown">
        <constructor-arg index="0" ref="httpClientConnectionManager" />
    </bean>
</beans>